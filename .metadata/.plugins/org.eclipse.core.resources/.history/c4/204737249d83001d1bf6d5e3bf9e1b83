package Ventanas;

import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Properties;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

import General.Animal;
import General.Cliente;
import bbdd.GestorBD;

public class VentanaCliente extends JFrame{
	protected JTextField DNI;
	protected JLabel ErrorCliente;
	protected JButton Buscar;
	protected JLabel dni;

	//para concatenar las ventanas
	protected VentanaAcoger v3;
	protected VentanaIntroducirCliente v2;
	protected JTabbedPane pestaña;
	protected JTree tr1;
	protected JTree tr2;
	
	public VentanaCliente(Properties idioma, GestorBD gestorV) {
		Container cp = this.getContentPane();
		DNI = new JTextField();
		ErrorCliente = new JLabel("");
		Buscar = new JButton(idioma.get("buscar").toString());
		dni = new JLabel(idioma.get("dni").toString());
		pestaña = new JTabbedPane();
		
		JScrollPane textoError = new JScrollPane(ErrorCliente);
		JPanel arriba = new JPanel();
		JPanel abajo = new JPanel();
		JPanel cp1 = new JPanel();
		
		cp1.setLayout(new GridLayout(2,2));
		
		cp1.add(dni);
		cp1.add(DNI);
		cp1.add(textoError);
		cp1.add(Buscar);
		pestaña.addTab("Introducir", cp1);		
		cp.add(pestaña);
		
		
		JPanel cp2 = new JPanel();
		DefaultMutableTreeNode Adoptado = new DefaultMutableTreeNode("Adopción");
		DefaultTreeModel modelo = new DefaultTreeModel(Adoptado);
		tr1 = new JTree(modelo);
		cp2.setLayout(new GridLayout(2,1));
		HashMap<Cliente, ArrayList<Animal>> hs1= hmadoptados(gestorV);
		cp2.add(tr1);
		pestaña.addTab("Adoptar", cp2);	
		
		
		
		
		JPanel cp3 = new JPanel();
		DefaultMutableTreeNode Acogido = new DefaultMutableTreeNode("Acogida");
		DefaultTreeModel modelo1 = new DefaultTreeModel(Acogido);
		HashMap<Cliente, ArrayList<Animal>> hs2= hmacogidos(gestorV);
		tr2 = new JTree(modelo1);
		cp3.setLayout(new GridLayout(2,1));
		cp3.add(tr2);
		pestaña.addTab("Acoger", cp3);

		
		
		this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		this.setVisible(true);
		this.setSize(300,100);
		this.setTitle(idioma.getProperty("introducir"));
		this.setLocationRelativeTo(null);
		Buscar.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			String res = encontrarCliente(DNI.getText(), gestorV, idioma);
			if (res.equals("Se ha encontrado el cliente")) {
			v3 = new VentanaAcoger(gestorV, idioma, DNI.getText());
			setVisible(false);
			} else if (res.equals("El cliente no existe")) {
			v2 = new VentanaIntroducirCliente(gestorV,idioma);
			setVisible(false);
			} else {
			ErrorCliente.setText(res);
			}
			}
			});
			Thread hilo = new Thread(new Runnable() {
				
				@Override
				public void run() {
					// TODO Auto-generated method stub
					int b = 0;
					boolean cambio = true;
					while(isVisible()) {
						if(!(b == 255) && cambio) {
							b++;
						}else if(b == 255) {
							b--;
							cambio = false;
						}else if (b==0) {
							b++;
							cambio = true;
						}else {
							b--;
						}
						Color color = new Color(0,0,b);
						ErrorCliente.setForeground(color);
						dni.setForeground(color);
						try {
							Thread.sleep(25);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}
			});
			hilo.start();
			
			KeyListener keyListener = new KeyAdapter() {
				@Override
				public void keyReleased(KeyEvent e) {
					// TODO Auto-generated method stub
					if (e.getKeyCode() == KeyEvent.VK_ENTER) {
						Buscar.doClick();
					}
					if (e.isAltDown()) {
						gestorV.actualizarCliente(DNI.getText(), 1);
					}
				}
			};
			this.Buscar.addKeyListener(keyListener);
			this.DNI.addKeyListener(keyListener);
			this.addWindowListener(new WindowAdapter() {
				
				
				@Override
				public void windowClosing(WindowEvent e) {
					// TODO Auto-generated method stub
					System.exit(0);
				}
			});
			}
			public String encontrarCliente(String DNIA, GestorBD gestorV, Properties idioma) {
			String resultado = "";
			ArrayList<Cliente> clientes = (ArrayList<Cliente>) gestorV.obtenerDatosCliente();
			for (Cliente cliente : clientes) {
			if (cliente.getDni().equals(DNIA)) {
			if (cliente.isPermiso()) {
			resultado = "Se ha encontrado el cliente";
			} else {
			resultado = idioma.get("mes3").toString();
			}
			break;
			} else {
				if (DNIA.length() == 9) {
			resultado = "El cliente no existe";
			} else {
				resultado = idioma.getProperty("mes9");
			}
			}
			}
			return resultado;
			}
			public HashMap<Cliente, ArrayList<Animal>> hmadoptados(GestorBD gestorV){
				HashMap<Cliente, ArrayList<Animal>> ret= new HashMap<Cliente, ArrayList<Animal>>() ;
				ArrayList<Cliente> alcliente = (ArrayList<Cliente>) gestorV.obtenerDatosCliente();
				for(Cliente u: alcliente ) {
					ret.put(u, u.getAnimalesAdoptados());	
				}
				return ret;
				
			}
			public HashMap<Cliente, ArrayList<Animal>> hmacogidos(GestorBD gestorV){
				HashMap<Cliente, ArrayList<Animal>> ret= new HashMap<Cliente, ArrayList<Animal>>() ;
				ArrayList<Cliente> alcliente = (ArrayList<Cliente>) gestorV.obtenerDatosCliente();
				for(Cliente u: alcliente ) {
					ret.put(u, u.getAnimalesAcogidos());	
				}
				return ret;
				
			}
			
			}
